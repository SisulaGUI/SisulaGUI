<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="source">
    <xs:annotation>
      <xs:documentation>
        rowlength    can be specified as an integer number, but defaults to 'max'
        split        specifies with which method rows should be split into columns
        "bulk" splits already at bulk insert time but imposes
        the limit that only one part can be present and only
        delimiter and size can be used.
        "regex" will read whole rows into a raw table and then perform
        the split using a CLR splitter, which allows for many parts in
        the same file, and pattern can be used to match the resulting
        column value.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element type="xs:anyURI" name="description"/>
        <xs:element name="part" maxOccurs="unbounded" minOccurs="0">
          <xs:complexType mixed="true">
            <xs:choice maxOccurs="unbounded" minOccurs="0">
              <xs:element name="term">
                <xs:annotation>
                  <xs:documentation>
                    only capture a part of the string
                    CHAR(183) is · (small bullet), which is rarely used so we can use it as our own
                    internal delimiter for the regex matching later. The select below builds a
                    concatenation of a number of rows.
                  </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:simpleContent>
                    <xs:extension base="xs:string">
                      <xs:attribute type="xs:string" name="name" use="optional"/>
                      <xs:attribute type="xs:string" name="delimiter" use="optional"/>
                      <xs:attribute type="xs:string" name="format" use="optional"/>
                      <xs:attribute type="xs:string" name="pattern" use="optional"/>
                    </xs:extension>
                  </xs:simpleContent>
                </xs:complexType>
              </xs:element>
              <xs:element name="key">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="component" maxOccurs="unbounded" minOccurs="0">
                      <xs:complexType>
                        <xs:simpleContent>
                          <xs:extension base="xs:string">
                            <xs:attribute type="xs:string" name="of" use="optional"/>
                          </xs:extension>
                        </xs:simpleContent>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute type="xs:string" name="name"/>
                  <xs:attribute type="xs:string" name="type"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="calculation">
                <xs:annotation>
                  <xs:documentation>
                    calculations are persisted by default so they can be used in keys,
                    but that is only possible for deterministic calculations

                    positive lookahead with an optional number of preceeding characters leading
                    up to the string to match, after which we capture everything. In the capture
                    we replace small bullets (formerly line breaks) with spaces.
                  </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:simpleContent>
                    <xs:extension base="xs:string">
                      <xs:attribute type="xs:string" name="name" use="optional"/>
                      <xs:attribute type="xs:string" name="format" use="optional"/>
                      <xs:attribute type="xs:string" name="persisted" use="optional"/>
                      <xs:attribute type="xs:string" name="pattern" use="optional"/>
                    </xs:extension>
                  </xs:simpleContent>
                </xs:complexType>
              </xs:element>
            </xs:choice>
            <xs:attribute type="xs:string" name="name" use="optional"/>
            <xs:attribute type="xs:string" name="nulls" use="optional"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute type="xs:string" name="name"/>
      <xs:attribute type="xs:string" name="codepage"/>
      <xs:attribute type="xs:string" name="datafiletype"/>
      <xs:attribute type="xs:string" name="fieldterminator"/>
      <xs:attribute type="xs:short" name="rowlength"/>
      <xs:attribute type="xs:string" name="split"/>
    </xs:complexType>
  </xs:element>
</xs:schema>